//+------------------------------------------------------------------+
//| EvenOddVolatilityBot.mq5                                        |
//| Copyright 2024, MetaQuotes Ltd.                                  |
//+------------------------------------------------------------------+
input double   LotSize = 0.1;          // Base trade size
input int      ATR_Period = 14;        // Volatility check period
input int      LookbackTicks = 100;    // For Even/Odd simulation

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
// Avoid over-trading
   static datetime lastTradeTime = 0;
   if(TimeCurrent() - lastTradeTime < 60) return; // 1 min cooldown

// Get last digit of price (simulate Even/Odd)
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   int lastDigit = (int)MathMod(bid * 100, 10);
   bool isEven = (lastDigit % 2 == 0);

// Volatility check (ATR)
   double atr[];
   CopyBuffer(iATR(_Symbol, PERIOD_M15, ATR_Period), 0, 1, 1, atr);
   bool isVolatile = atr[0] > (0.005 * SymbolInfoDouble(_Symbol, SYMBOL_POINT));

// Trading logic
   if(isVolatile)
     {
      if(isEven && CountOpenTrades() < 1)
         ExecuteTrade(ORDER_TYPE_BUY);
      else if(!isEven && CountOpenTrades() < 1)
         ExecuteTrade(ORDER_TYPE_SELL);
     }
   lastTradeTime = TimeCurrent();
  }

//+------------------------------------------------------------------+
//| Execute trade function                                           |
//+------------------------------------------------------------------+
void ExecuteTrade(ENUM_ORDER_TYPE orderType)
  {
   MqlTradeRequest request = {};
   request.action = TRADE_ACTION_DEAL;
   request.symbol = _Symbol;
   request.volume = LotSize;
   request.type = orderType;
   request.price = orderType == ORDER_TYPE_BUY ? SymbolInfoDouble(_Symbol, SYMBOL_ASK) : 
                                               SymbolInfoDouble(_Symbol, SYMBOL_BID);
   request.deviation = 10;
   request.type_filling = ORDER_FILLING_FOK;
   
   MqlTradeResult result;
   OrderSend(request, result);
  }

//+------------------------------------------------------------------+
//| Count open trades                                                |
//+------------------------------------------------------------------+
int CountOpenTrades()
  {
   int count = 0;
   for(int i = PositionsTotal()-1; i >= 0; i--)
      if(PositionGetSymbol(i) == _Symbol)
         count++;
   return count;
  }
